package com.yuchengtech.mobile.server.web.controller;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.yuchengtech.mobile.server.common.Constants;
import com.yuchengtech.mobile.server.security.auth.AuthManager;
import com.yuchengtech.mobile.server.security.auth.ClientInfo;
import com.yuchengtech.mobile.server.web.MobileException;
import com.yuchengtech.mobile.server.web.service.ServiceManage;
import com.yuchengtech.mobile.server.web.utils.ThreeDesUtil;
import com.yuchengtech.mobile.server.web.view.JsonView;
import com.yuchengtech.mobile.server.web.view.LianaView;
import com.yuchengtech.mobile.server.web.view.View;
/**
 * 
 *Liana后端业务调用Controller
 * @author Administrator
 *
 */
public class MobileCommonController extends AbstractController {
	private static final Logger log = LoggerFactory
			.getLogger(MobileCommonController.class);

	 
	public View execute(HttpServletRequest request, HttpServletResponse response) {
		System.out.println("interface url:"+request.getRequestURI());
		this.request = request;
		Enumeration<String> enums= request.getHeaderNames();
		StringBuffer sb=new StringBuffer();
		/*while(enums.hasMoreElements()){
		    if(sb.length()>0)sb.append("|");
			String n=enums.nextElement();
			String v=request.getHeader(n);
			sb.append(n).append(":").append(v);
		}*/
		sb.append("Cookie:").append(request.getHeader("Cookie") );
		log.debug("header:"+sb.toString());
		this.response = response;
		Object reultData;

		Map<String, String> values= new HashMap<String, String>();
		
		//解密报文
		if (Constants.messageEncrypt) {
			String cipher=request.getParameter("cipher");
			if (cipher==null||cipher.equals("")){
				log.warn("Message Encrypt/Decrypt Fail,Code 1002:未传输加密报文:"+request.getRequestURI());
				reultData=getError("1002","未传输加密报文");
				return new JsonView(request, response, reultData);
			}
			
			String did=request.getParameter("d");
			if (did==null||did.equals("")){
				log.warn("Message Encrypt/Decrypt Fail,Code 1002:未传输设备标识");
				reultData=getError("1002","未传输设备标识");
				return new JsonView(request, response, reultData);
			}
			
			ClientInfo c= AuthManager.getClientInfo(did);
			System.out.println("c:"+c);
			
			String msg=null;
			try {
				msg = ThreeDesUtil.decryptThreeDESECB(c.getToken(), cipher);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			if (msg==null||msg.equals("")){
				log.warn("Message Encrypt/Decrypt Fail,Code 1002:请求报文解密失败");
				reultData=getError("1002","请求报文解密失败");
				return new JsonView(request, response, reultData);
			}
			
			values= getJsonReqValues(msg);
			
			if (values==null){
				log.warn("Message Encrypt/Decrypt Fail,Code 1002:请求报文解析失败，字段值只能为String、Integer、Long、Float或Double类型");
				reultData=getError("1002","请求报文解析失败");
				return new JsonView(request, response, reultData);
			}
		}else{
			values= getReqValues();
		}
		
		String did=values.get("d");
		String encode_msg=values.get("e");
		String channel=values.get("channel");
		if(channel==null){
			channel=values.get("channel");
		}
		
		//已失效。用于部分接口加密的情况，目前已改为全部接口加密
//		int check_result=AuthManager.basicCheck(did, encode_msg,values.get("action"));
		
//		//临时：校验请求的接口是否是Liana可访问接口
//		int check_result=AuthManager.basicCheck(did,values.get("action"));
		
//		if(channel==null||(Constants.NoCheck_channel.indexOf(channel)==-1&&check_result!=0)){
//			log.warn("Client Check Fail,Code 1003:"+check_result);
//			reultData=getError("1003","无效请求");
//			return new JsonView(request, response, reultData);
//		}
		
		//todo:日志记录
		String msg=prepareParam(values);
		
		System.out.println("!!!!!!!!!!msg:"+msg);
		
		try {
			List list = (List) ServiceManage.getHttpResource().sendAndWait(values.get("action"),msg,sb.toString());
			reultData=list.get(0);
			
			System.out.println("!!!!!!!list.size():"+list.size());
			if(list.size()>1){
				String setCookie=list.get(1).toString();
				setCookie(setCookie);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("",e);
			log.warn("Interface Access Fail,Code 1001:通信异常，Liana接口访问失败");
			reultData=getError("1001","通信异常");
			return new JsonView(request, response, reultData);
		}

		//响应加密报文
		if (Constants.messageEncrypt) {
			try {
				//将返回对象转为json字符串
				String src=reultData.toString();
				//加密报文
				ClientInfo c= AuthManager.getClientInfo(did);
				String cipher=ThreeDesUtil.encryptThreeDESECB(c.getToken(), src);
				//创建返回的Object
				StringBuilder result=new StringBuilder();
				result.append("{\"ec\":\"0\",");
				result.append("\"cipher\":\""+cipher+"\"}");
				reultData=result;
			} catch (Exception e) {
				e.printStackTrace();
				log.warn("Message Encrypt/Decrypt Fail,Code 1002:响应报文加密失败");
				reultData=getError("1002","响应报文加密失败");
				return new JsonView(request, response, reultData);
			}
		}
		return new LianaView(request, response, reultData);
	}
}
